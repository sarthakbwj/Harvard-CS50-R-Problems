clear
source("pitstop.R")
check50("cs50/problems/2024/r/pitstop")
# Calculate the required information
total_pit_stops <- nrow(data)  # Total number of pit stops
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
shortest_pit_stop <- min(data$time)  # Duration of the shortest pit stop
cat("Total time spent on pit stops: ", total_time_spent, " seconds\n")
cat("Longest pit stop duration: ", longest_pit_stop, " seconds\n")
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/Intro/Lecture_1.R", echo=TRUE)
install.packages("tidyverse")
library("tidyverse")
storms
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
storms
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
storm
storm
storm
dplyr::select(
storms,
!c(lat, pressure, tropicalstorm_force_diameter, hurricane_force_diameter)
)
View(storm)
storm
View(storm)
dplyr::filter(
dplyr::select(
storms,
!c(lat, pressure, endsWith("diameter"))
),
status == "hurricane"
)
tidyverse
install.packages("tidyverse")
storms
storms
install.packages("dplyr")
library("dplyr")
storms
storms
storms
dplyr::filter(
dplyr::select(
storms,
!c(lat, pressure, endsWith("diameter"))
),
status == "hurricane"
)
storms |>
select(!c(lat,long, pressure, endsWith("diameter"))) |>
filter(status == "hurricane")
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane")
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(wind)
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind))
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind), desc(name))
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind), name)
storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year)
storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)
hurricanes -> storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
dir.create("ducksay")
setwd("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Packaging_Programs_L7/ducksay")
file.create("DESCRIPTION")
file.create("LECENSE")
library(devtools)
use_testthat()
use_test("ducksay")
use_test("ducksay")
getwd()
setwd(dir)
setwd(dir - /Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1 /pitstop)
setwd("/Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1 /pitstop")
getwd()
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1 /pitstop/pitstop.R")
download.file("https://cdn.cs50.net/r/2024/x/psets/1/big5.zip", "big5.zip")
unzip("big5.zip")
file.remove("big5.zip")
setwd("big5")
big5/
list.files()
list.files()
getwd()
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1 /big5/big5.R")
dir.create("art.frame")
getwd()
setwd("/Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0")
dir.create("art.frame")
setwd("art.frame")
file.create("art.R")
list.files()
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
print(art)
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 0/art.frame/art.R")
getwd()
setwd("/Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1")
download.file("https://cdn.cs50.net/r/2024/x/psets/2/librarian.zip", "librarian.zip")
unzip("librarian.zip")
file.remove("librarian.zip")
setwd("librarian")
df_authors <- data.frame("authors.csv")
df_authors
df_authors
library(readr)
authors <- read_csv("authors.csv")
View(authors)
View(authors)
books <- data.frame("books.csv")
View(books)
View(authors)
books <- data.frame("books.csv")
View(books)
View(books)
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/librarian/log.R")
books
books <- data.frame("books")
books
books
books
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/librarian/log.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/librarian/log.R")
books <- data.frame("books")
books
books <- read.csv("books.csv")
books <- data.frame("books")
books
df
df <- data.frame("books")
df
download.file("https://cdn.cs50.net/r/2024/x/psets/2/ontime.zip", "ontime.zip")
getwd()
setwd("/Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/")
download.file("https://cdn.cs50.net/r/2024/x/psets/2/ontime.zip", "ontime.zip")
unzip("ontime.zip")
file.remove("ontime.zip")
setwd("ontime")
View(data)
View(books)
View(authors)
View(art)
