clear
source("pitstop.R")
check50("cs50/problems/2024/r/pitstop")
# Calculate the required information
total_pit_stops <- nrow(data)  # Total number of pit stops
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
shortest_pit_stop <- min(data$time)  # Duration of the shortest pit stop
cat("Total time spent on pit stops: ", total_time_spent, " seconds\n")
cat("Longest pit stop duration: ", longest_pit_stop, " seconds\n")
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/pitstop/pitstop.R", echo=TRUE)
source("~/StatisticalR/Intro/Lecture_1.R", echo=TRUE)
install.packages("tidyverse")
library("tidyverse")
storms
file.create("/Users/sarthakbwj/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
storms
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
storm
storm
storm
dplyr::select(
storms,
!c(lat, pressure, tropicalstorm_force_diameter, hurricane_force_diameter)
)
View(storm)
storm
View(storm)
dplyr::filter(
dplyr::select(
storms,
!c(lat, pressure, endsWith("diameter"))
),
status == "hurricane"
)
tidyverse
install.packages("tidyverse")
storms
storms
install.packages("dplyr")
library("dplyr")
storms
storms
storms
dplyr::filter(
dplyr::select(
storms,
!c(lat, pressure, endsWith("diameter"))
),
status == "hurricane"
)
storms |>
select(!c(lat,long, pressure, endsWith("diameter"))) |>
filter(status == "hurricane")
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane")
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(wind)
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind))
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind), desc(name))
storms |>
select(!c(lat, long, pressure, ends_with("diameter"))) |>
filter(status == "hurricane") |>
arrange(desc(wind), name)
storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year)
storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)
hurricanes -> storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes <- storms |>    # from the DS storms...
select(!c(lat, long, pressure, ends_with("diameter"))) |>   # ignore columns lat, long.....
filter(status == "hurricane") |>   # show rows only with 'hurricane' as status.
arrange(desc(wind), name) |>  # show max wind speed at the top and names in ascending.
distinct(name, year, .keep_all = TRUE)  # unique names with year while keeps others rows similar to main DS.
hurricanes
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
hurricanes |>
select(c(year, name, wind)) |>
write.csv("hurricanes.csv", row.names = FALSE)
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
source("~/Documents/GitHub/Statistical_R/Lectures/Tidying_Data_L4/Storms.R")
bus <- read.csv("bus.csv")
getwd()
setwd("/Users/sarthakbwj/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/ontime")
bus <- read.csv("bus.csv")
View(bus)
View(rail)
rail <- read.csv("rail.csv")
View(rail)
user_input <- readline("Enter a route you intend to take: ")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/ontime/ontime.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/ontime/ontime.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/ontime/ontime.R")
source("~/Documents/GitHub/Harvard-CS50-R-Problems/Problem Set 1/ontime/ontime.R")
